{"version":3,"sources":["utils/time.js","features/time-widget/components/sky-sphere/component.js","features/time-widget/components/stars/component.js","features/time-widget/component.js","pages/homepage/component.js","features/navigation/component.js","pages/projects/component.js","serviceWorker.js","index.js","app/component.js"],"names":["DAY_SCALE","DAY_SCALE_HALF","DAY_SCALE_FOURTH","calculateDayNightDetails","hour","minute","currentHour","maxDistance","tiltedHour","peakDayNightTime","totalReferenceTime","skySpherePercentY","Math","abs","skySpherePercentX","dayPercents","map","sectionNum","distanceDirect","distanceIndirect","distance","min","console","log","isDay","nightPercent","morningPercent","noonPercent","eveningPercent","SkySphere","props","_useSizeOfElement","wrapperRef","useRef","width","height","_useState","useState","_useState2","Object","slicedToArray","reRender","useLayoutEffect","current","clientWidth","clientHeight","setRef","ref","useSizeOfElement","translateX","percentX","translateY","percentY","style","concat","size","transform","backgroundColor","display","react_default","a","createElement","className","getRandom","max","random","Stars","boxShadowValue","i","addStars","boxShadow","TimeWidget","pixelSize","wrapperStyle","border","_getChangingDayNightD","setHour","useEffect","interval","setInterval","clearInterval","getChangingDayNightDetails","opacity","Homepage","background","Navigation","Fragment","Link","to","Projects","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","HashRouter","Switch","Route","exact","path","component","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c9e2659c.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nconst DAY_SCALE = 24;\nconst DAY_SCALE_HALF = DAY_SCALE / 2;\nconst DAY_SCALE_FOURTH = DAY_SCALE / 4;\n\nexport function getDayNightDetails() {\n  const currentTime = new Date();\n\n  const hour = currentTime.getHours();\n  const minute = currentTime.getMinutes();\n\n  return calculateDayNightDetails(hour, minute)\n}\n\n/**\n * Runs quickly, good for testing\n */\nexport function getChangingDayNightDetails() {\n  const [hour, setHour] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setHour((hour + 1) % DAY_SCALE);\n    }, 800);\n\n    return () => {\n      clearInterval(interval);\n    }\n  });\n\n  return calculateDayNightDetails(hour, 0);\n}\n\nconst PEAK_DAY = 12;\n\n\nexport function calculateDayNightDetails(hour, minute) {\n  // 0-12 = Night, 12-24 = Day, easier for calculations\n  const tiltedHour = (hour + DAY_SCALE_FOURTH) % DAY_SCALE;\n  const referenceHour = tiltedHour % (DAY_SCALE_HALF);\n  const peakDayNightTime = DAY_SCALE_FOURTH;\n  const minuteDecimal = minute === 0 ? 0 : (minute / 60);\n  const totalReferenceTime = referenceHour + minuteDecimal;\n  const distanceFromPeak = Math.abs(peakDayNightTime - totalReferenceTime);\n  const skySpherePercentY = (peakDayNightTime - distanceFromPeak) / peakDayNightTime * 100;\n  const skySpherePercentX = (totalReferenceTime * 100 / 12);\n\n  const dayPercents = getSectionOpacity(tiltedHour, [0, 6, 12, 18], 7);\n\n  return {\n    isDay: tiltedHour >= DAY_SCALE_HALF,\n    skySpherePercentY,\n    skySpherePercentX,\n    nightPercent: dayPercents[1],\n    morningPercent: dayPercents[2],\n    noonPercent: dayPercents[3],\n    eveningPercent: dayPercents[0],\n    hour,\n  };\n}\n\n/**\n * Given the params below this returns a parallel array of decimals based on\n * the closeness to each given section.\n * \n * @param {number} hour\n * @param {number[]} sectionPeaks \n * @param {number} maxDistance \n */\nexport function getSectionOpacity(currentHour, sectionPeaks, maxDistance) {\n  return sectionPeaks.map((sectionNum) => {\n    const distanceDirect = Math.abs(sectionNum - currentHour);\n    const distanceIndirect = sectionNum > currentHour ?\n      (24 - sectionNum) + currentHour :\n      (24 - currentHour) + sectionNum;\n    const distance = Math.min(distanceDirect, distanceIndirect);\n\n    if (currentHour === 0) {\n      console.log({currentHour, maxDistance, distanceDirect, distanceIndirect})\n    }\n\n    return distance > maxDistance ? 0 : (maxDistance - distance) / maxDistance;\n  });\n}","import React, { useState, useRef, useLayoutEffect } from 'react';\nimport './styles.css';\n\nexport function SkySphere(props) {\n  const { setRef, width, height } = useSizeOfElement();\n\n  const translateX = (props.percentX / 100) * width;\n  const translateY = (props.percentY / 100) * height;\n\n  const style = {\n    width: `${props.size}px`,\n    height: `${props.size}px`,\n    transform: `translateX(${translateX}px) translateY(-${translateY}px)`,\n    backgroundColor: props.isDay ? 'yellow' : 'white',\n    display: width ? 'block' : 'none',\n  }\n\n  return (\n    <div className=\"sky-sphere-center\">\n      <div className=\"sky-sphere-wrapper\" ref={setRef}>\n        <div className=\"sky-sphere\" style={style} />\n      </div>\n    </div>\n  );\n}\n\nfunction useSizeOfElement() {\n  let wrapperRef = useRef();\n  let width = useRef();\n  let height = useRef();\n\n  const [_, reRender ] = useState(0);\n\n  const setWrapperRef = (ref) => {\n    wrapperRef.current = ref;\n  }\n\n  useLayoutEffect(() => {\n    if (wrapperRef.current) {\n      width.current = wrapperRef.current.clientWidth;\n      height.current = wrapperRef.current.clientHeight;\n    } else {\n      reRender();\n    }\n  });\n\n  return {\n    setRef: setWrapperRef,\n    width: width.current,\n    height: height.current,\n  }\n}\n","import React, { useState } from 'react';\nimport './styles.css';\n\nfunction getRandom(max) {\n  return Math.random() * max;\n}\n\nfunction addStars(size) {\n  let boxShadowValue = '';\n  boxShadowValue += `${getRandom(size)}px ${getRandom(size)}px white`\n  for (let i = 2; i < size; i++) {\n    boxShadowValue += ` , ${getRandom(size)}px ${getRandom(size)}px white`\n  }\n  return boxShadowValue;\n}\n\nexport function Stars(props) {\n  const [boxShadowValue] = useState(addStars(props.size));\n\n  const style = {\n    boxShadow: boxShadowValue,\n  }\n\n  return (\n    <div className=\"stars\" style={style} />\n  );\n}","import React from 'react';\nimport { renderInterval } from '../../utils/render-interval';\nimport { getDayNightDetails, getChangingDayNightDetails } from '../../utils/time';\nimport { SkySphere } from './components/sky-sphere/component';\nimport { Stars } from './components/stars/component';\nimport './styles.css';\n\nconst TIME_UPDATE_INTERVAL_MS = 1 * 1000;\n\nexport function TimeWidget(props) {\n  const pixelSize = `${props.size}px`;\n\n  const wrapperStyle = {\n    width: pixelSize,\n    height: pixelSize,\n    border: 'solid black 2px',\n  }\n\n  // const {\n  //   hour,\n  //   skySpherePercentX,\n  //   skySpherePercentY,\n  //   isDay,\n  //   nightPercent,\n  //   morningPercent,\n  //   noonPercent,\n  //   eveningPercent,\n  // } = renderInterval(TIME_UPDATE_INTERVAL_MS, getDayNightDetails);\n\n  const {\n    hour,\n    skySpherePercentX,\n    skySpherePercentY,\n    isDay,\n    nightPercent,\n    morningPercent,\n    noonPercent,\n    eveningPercent,\n  } = getChangingDayNightDetails();\n\n  return (\n    <div className=\"time-widget-wrapper\" style={wrapperStyle}>\n      <div className=\"sky\">\n        <div className=\"light-filter time-sky-night\" style={{ opacity: nightPercent }} />\n        <div className=\"light-filter time-sky-morning\" style={{ opacity: morningPercent }} />\n        <div className=\"light-filter time-sky-noon\" style={{ opacity: noonPercent }} />\n        <div className=\"light-filter time-sky-evening\" style={{ opacity: eveningPercent }} />\n      </div>\n      <div style={{ opacity: nightPercent }}>\n        <Stars size={props.size} />\n      </div>\n      <SkySphere\n        hour={hour}\n        percentX={skySpherePercentX}\n        percentY={skySpherePercentY}\n        isDay={isDay}\n        size={props.size / (isDay ? 10 : 20)}\n      />\n      <div className=\"time-land-wrapper\">\n        <div className=\"light-filter time-land-night\" style={{ opacity: nightPercent }} />\n        <div className=\"light-filter time-land-morning\" style={{ opacity: morningPercent }} />\n        <div className=\"light-filter time-land-noon\" style={{ opacity: noonPercent }} />\n        <div className=\"light-filter time-land-evening\" style={{ opacity: eveningPercent }} />\n      </div>\n    </div>\n  )\n}","import React from 'react';\nimport { TimeWidget } from '../../features/time-widget/component';\nimport './style.css';\n\nexport function Homepage() {\n  return (\n    <div style={{ background: 'eggshell' }}>\n      <TimeWidget size={10} />\n      <TimeWidget size={50} />\n      <TimeWidget size={100} />\n      <TimeWidget size={200} />\n      <TimeWidget size={500} />\n    </div>\n  );\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport function Navigation() {\n    return (\n        <>\n            <Link to={`/`}>Home</Link>\n            <Link to={`/projects`}>Projects</Link>\n        </>\n    )\n}","import React from 'react';\n\nexport function Projects() {\n  return (\n    <div className=\"App\">\n        Projects!\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport { App } from './app/component';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <HashRouter>\n        <App />\n    </HashRouter>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n","import React from 'react';\nimport { Homepage } from '../pages/homepage/component';\nimport { Navigation } from '../features/navigation/component';\nimport { Switch, Route } from 'react-router-dom'\nimport { Projects } from '../pages/projects/component';\nimport './style.css';\n\nexport function App() {\n  return (\n    <>\n      <Navigation />\n      <Switch>\n        <Route exact path='/' component={Homepage}/>\n        <Route exact path='/projects' component={Projects}/>\n      </Switch>\n    </>\n  );\n}\n"],"sourceRoot":""}